//
//  ABIEncoderTests.swift
//  
//
//  Created by Yuri on 05.06.2023.
//
import XCTest
import BigInt
@testable import SmartContract

final class ABIEncoderTests: XCTestCase {

    func testEncodeSingleStaticValue() throws {
        let one = BigUInt(1000)
        XCTAssertEqual(try one.encode().hexString, "0x00000000000000000000000000000000000000000000000000000000000003e8")
        
        let bool = true
        XCTAssertEqual(try bool.encode(as: .bool).hexString, "0x0000000000000000000000000000000000000000000000000000000000000001")
        
        let minusOne = BigInt(-1)
        XCTAssertEqual(try minusOne.encode().hexString, "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")
        
        let address = EthereumAddress("0x55d398326f99059ff775485246999027b3197955")!
        XCTAssertEqual(try address.encode().hexString, "0x00000000000000000000000055d398326f99059ff775485246999027b3197955")
        
        let bytes3 = Data(hex: "0x007")!
        XCTAssertEqual(try bytes3.encode(as: .bytes(count: 3)).hexString, "0x0007000000000000000000000000000000000000000000000000000000000000")
    }
    
    func testEncodeString() throws {
        let sample = "Hello World!    Hello World!    Hello World!"
        let encoded = "0x000000000000000000000000000000000000000000000000000000000000002c48656c6c6f20576f726c64212020202048656c6c6f20576f726c64212020202048656c6c6f20576f726c64210000000000000000000000000000000000000000"
        
        XCTAssertEqual(try sample.encode().hexString, encoded)
    }

    func testEncodeStaticArray() throws {
        let sampleAddress = [
            EthereumAddress("0xf784682c82526e245f50975190ef0fff4e4fc077")!,
            EthereumAddress("0x2e00cd222cb42b616d86d037cc494e8ab7f5c9a3")!,
        ]
        
        let encoded = "0x000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc0770000000000000000000000002e00cd222cb42b616d86d037cc494e8ab7f5c9a3"

        XCTAssertEqual(try sampleAddress.encode(as: .array(type: .address, length: 2)).hexString, encoded)
    }
    
    func testEncodeDynamicArray() throws {
        let sampleAddress = [
            EthereumAddress("0xf784682c82526e245f50975190ef0fff4e4fc077")!,
            EthereumAddress("0x2e00cd222cb42b616d86d037cc494e8ab7f5c9a3")!,
        ]
        
        let encoded =     "0x0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f784682c82526e245f50975190ef0fff4e4fc0770000000000000000000000002e00cd222cb42b616d86d037cc494e8ab7f5c9a3"

        XCTAssertEqual(try sampleAddress.encode(as: .dynamicArray(ofType: .address)).hexString, encoded)
    }

    func testEncodeTuple() throws {
        let sample1 = "0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000406fdde0300000000000000000000000000000000000000000000000000000000"
        
        let encoded = try ABIEncoder.encodeDynamic((.address, EthereumAddress("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2")!), (.dynamicBytes, Data(hex: "0x06fdde03")!))
        
        XCTAssertEqual(encoded.hexString, sample1)
        
        let sample2 = "0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000495d89b4100000000000000000000000000000000000000000000000000000000"
        
        let encoded2 = try ABIEncoder.encodeDynamic((.address, EthereumAddress("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2")!), (.dynamicBytes, Data(hex: "0x95d89b41")!))
        
        XCTAssertEqual(encoded2.hexString, sample2)
    }
    
    func testDynamicArray() throws {
        let calls: [MulticallContract.Call] = [
            .init(address: EthereumAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")!, bytes: Data(hex: "0x06fdde03")!),
            .init(address: EthereumAddress("0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2")!, bytes: Data(hex: "0x95d89b41")!)
        ]
        
        let encoded = try ABIEncoder.encodeDynamic(arrayOf: .tuple(types: [.address, .dynamicBytes]), values: calls)
        
        let sample =
        """
        0000000000000000000000000000000000000000000000000000000000000020
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000040
        00000000000000000000000000000000000000000000000000000000000000c0
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000004
        06fdde0300000000000000000000000000000000000000000000000000000000
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000004
        95d89b4100000000000000000000000000000000000000000000000000000000
        """.split(separator: "\n").joined()
        
        XCTAssertEqual(encoded.hexString, sample.addHexPrefix())
    }
    
}

/*
        0000000000000000000000000000000000000000000000000000000000000002
        0000000000000000000000000000000000000000000000000000000000000040
        00000000000000000000000000000000000000000000000000000000000000c0
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000004
        06fdde0300000000000000000000000000000000000000000000000000000000
        000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2
        0000000000000000000000000000000000000000000000000000000000000040
        0000000000000000000000000000000000000000000000000000000000000004
        95d89b4100000000000000000000000000000000000000000000000000000000
 */
